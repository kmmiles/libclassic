#!/usr/bin/env bash
#
# quick and dirty wrapper script to run typescript programs on the commandline. 
# seems like a simple thing to do, but somehow it isn't.

TSCOPTS="--target ES5 --sourceMap false --resolveJsonModule --esModuleInterop"

function warn() {
  >&2 echo "${1:-}" 
}

function cleanup() {
  if [ -d ${TEMPDIR:-} ]; then
    warn "Cleaning up ${TEMPDIR}"
    rm -rf "${TEMPDIR}"
  fi
}

function exit_success() {
    cleanup
    warn "Exiting succesfully"    
    exit 0
}

function exit_failure() {
    cleanup
    warn "Exiting with error"    
    exit 1
}

__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__root="$(cd "$(dirname "${__dir}")" && pwd)"

set -o errexit
set -o pipefail
set -o nounset

TSC="${__root}/node_modules/.bin/tsc"
if [ ! -f ${TSC} ]; then
    warn "Missing ${TSC}"
    exit 1 
fi

TSFILE="${1:-}"
if [ -z "$TSFILE" ]; then
    warn "Usage: $(basename $0) <tsfile> [args...]"
    warn ""
    warn "Run .ts file as commandline program"
    exit 1
fi

if [ ! -f ${TSFILE} ]; then
    warn "No such file: ${TSFILE}"
    exit 1 
fi

TEMPDIR="${__root}/tmp"
mkdir -p "${TEMPDIR}"
if [ ! -d "${TEMPDIR}" ]; then
    warn "Failed to create tempdir: $TEMPDIR"
    exit 1
fi

warn "Compiling ${TSFILE}..."
TSCMD="${TSC} ${TSCOPTS} --outDir ${TEMPDIR} --baseUrl ${__root} ${TSFILE}"
>&2 eval "${TSCMD}"
RC="$?"
if [ "${RC}" != "0" ]; then
    warn "tsc failed with ${RC}: ${TSCMD}"
    exit_failure
fi

JSFILE="${TEMPDIR}/$(echo $(basename ${TSFILE}) | sed 's/.ts/.js/g')"
if [ ! -f "${JSFILE}" ]; then
    warn "Failed to find jsfile: ${JSFILE}"
    exit_failure
fi

warn "Running $(basename ${JSFILE})..."
CMD="node ${JSFILE}"
eval "${CMD}"
RC="$?"
if [ "${RC}" != "0" ]; then
    warn "node failed with ${RC}: ${CMD}"
    exit_failure
fi

exit_success