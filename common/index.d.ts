declare const _default: {
    utils: {
        getEnumKeyByEnumValue: (myEnum: any, enumValue: string | number) => string;
        getEnumValueFromFuzzyText: (myEnum: any, fuzzyText: string, exact?: boolean | undefined) => string | number;
        getEnumValuesFromFuzzyText: (myEnum: any, fuzzyText: string) => any[];
        sanitizeStringForEnum: (s: string) => string;
        triangularNumber: (n: number) => number;
        roundedString: (num: number, decimals: number) => string;
        isNode: boolean;
        isBrowser: boolean;
        isWebWorker: boolean;
        isMobile: () => boolean;
        cloneObject: (o: any) => any;
        isLetter: (char: string) => boolean;
        capitalize: (s: string) => string;
        fuzzyTextFromString: (s: string) => string;
        encodeURI: (str: string) => string;
        decodeURI: (str: string) => string;
        paramFromURL: (paramName: string, URL?: string | undefined) => string | null;
    };
    enums: {
        ArmorSubclass: typeof import("../enum/ArmorSubclass").default;
        Buffs: typeof import("../enum/Buffs").Buffs;
        Faction: typeof import("../enum/Faction").default;
        Gender: typeof import("../enum/Gender").default;
        ItemClass: typeof import("../enum/ItemClass").default;
        ItemQuality: typeof import("../enum/ItemQuality").default;
        ItemSlot: typeof import("../enum/ItemSlot").default;
        MagicSchool: typeof import("../enum/MagicSchool").default;
        PlayableClass: typeof import("../enum/PlayableClass").default;
        PlayableRace: typeof import("../enum/PlayableRace").default;
        PowerType: typeof import("../enum/PowerType").default;
        PvPRank: typeof import("../enum/PvPRank").default;
        SortOrder: typeof import("../enum/SortOrder").default;
        SpellCritFromIntellectDivisor: typeof import("../enum/SpellCritFromIntellectDivisor").default;
        TargetType: typeof import("../enum/TargetType").default;
        WeaponSubclass: typeof import("../enum/WeaponSubclass").default;
        ItemSuffixType: typeof import("../enum/ItemSuffixType").default;
        Raid: typeof import("../enum/Raid").default;
        WorldBoss: typeof import("../enum/WorldBoss").default;
        factionFromRace: (race: import("../enum/PlayableRace").default) => import("../enum/Faction").default;
        buffListToFlags: (buffList: string[]) => import("../enum/Buffs").Buffs;
        gearSlotFromText: (text: string) => import("../enum/GearSlot").default;
        raidFromText: (text: string) => import("../enum/Raid").default;
        raidsFromText: (text: string) => import("../enum/Raid").default[];
        worldBossFromText: (text: string) => import("../enum/WorldBoss").default;
        worldBossesFromText: (text: string) => import("../enum/WorldBoss").default[];
        pvpRankFromText: (text: string) => import("../enum/PvPRank").default;
        playableRaceFromText: (text: string) => import("../enum/PlayableRace").default;
        playableClassFromText: (text: string) => import("../enum/PlayableClass").default;
        playableClassesFromText: (text: string) => import("../enum/PlayableClass").default[];
        itemBonusTypeFromText: (text: string) => import("../enum/ItemBonusType").default;
        itemSuffixTypeFromText: (text: string) => import("../enum/ItemSuffixType").default;
        itemQualityFromText: (text: string) => import("../enum/ItemQuality").default;
    };
    calc: {
        globalCooldown: number;
        playerLevelCap: number;
        baseSpellCrit: number;
        baseSpellCritMultiplier: number;
        spellHitCap: number;
        spellCritCap: number;
        calcOptsFromSettings: (s: import("../interface/Settings").default) => import("../interface/CalcOpts").default;
        spellChanceToHit: (targetLevel: number, spellHit: number, opts?: import("../interface/CalcOpts").default | undefined) => number;
        spellChanceToMiss: (targetLevel: number, spellHit: number, opts?: import("../interface/CalcOpts").default | undefined) => number;
        spellChanceToCrit: (targetLevel: number, spellHit: number, spellCrit: number, opts?: import("../interface/CalcOpts").default | undefined) => number;
        spellChanceToNormal: (targetLevel: number, spellHit: number, spellCrit: number, opts?: import("../interface/CalcOpts").default | undefined) => number;
        spellPartialResistAvg: (targetLevel: number, targetBaseSpellResistance: number, characterLevel: number, characterSpellPenetration: number, binarySpell: boolean, opts?: import("../interface/CalcOpts").default | undefined) => number;
        spellCritBonusMultiplier: (opts?: import("../interface/CalcOpts").default | undefined) => number;
        spellCritMultiplier: (opts?: import("../interface/CalcOpts").default | undefined) => number;
        spellBaseDmgMultiplier: (spellName: string, opts?: import("../interface/CalcOpts").default | undefined) => number;
        spellBaseDmg: (spellName: string, dmg: number, opts?: import("../interface/CalcOpts").default | undefined) => number;
        targetSpellResistanceFromLevel: (targetLevel: number, characterLevel: number, binarySpell: boolean, opts?: import("../interface/CalcOpts").default | undefined) => number;
        targetSpellResistance: (targetLevel: number, targetBaseSpellResistance: number, characterLevel: number, characterSpellPenetration: number, binarySpell: boolean, opts?: import("../interface/CalcOpts").default | undefined) => number;
        manaPerTick: (charLvl: number, charSpirit: number, charMp5: number, opts?: import("../interface/CalcOpts").default | undefined) => any;
    };
    settings: {
        defaults: (opts?: {
            playerSpec: import("../enum/PlayableSpec").default;
        } | undefined) => import("../interface/Settings").default;
    };
};
export default _default;
