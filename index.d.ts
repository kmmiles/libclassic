import Character from './class/Character';
import Item from './class/Item';
import Equipment from './class/Equipment';
import Target from './class/Target';
import Spell from './class/Spell';
import Cast from './class/Cast';
import Encounter from './class/Encounter';
declare const _default: {
    sum: (a: number, b: number) => number;
    common: {
        ArmorSubclass: typeof import("./enum/ArmorSubclass").default;
        Buff: typeof import("./enum/Buff").Buff;
        Faction: typeof import("./enum/Faction").default;
        Gender: typeof import("./enum/Gender").default;
        GearItemClass: typeof import("./enum/GearItemClass").default;
        GearItemQuality: typeof import("./enum/GearItemQuality").default;
        ItemSlot: typeof import("./enum/ItemSlot").default;
        MagicSchool: typeof import("./enum/MagicSchool").default;
        PlayableClass: typeof import("./enum/PlayableClass").default;
        PlayableRace: typeof import("./enum/PlayableRace").default;
        PowerType: typeof import("./enum/PowerType").default;
        PvPRank: typeof import("./enum/PvPRank").default;
        SortOrder: typeof import("./enum/SortOrder").default;
        SpellCritFromIntellectDivisor: typeof import("./enum/SpellCritFromIntellectDivisor").default;
        TargetType: typeof import("./enum/TargetType").default;
        WeaponSubclass: typeof import("./enum/WeaponSubclass").default;
        GearItemSuffixType: typeof import("./enum/GearItemSuffixType").default;
        Raid: typeof import("./enum/Raid").default;
        WorldBoss: typeof import("./enum/WorldBoss").default;
        factionFromRace: (race: import("./enum/PlayableRace").default) => import("./enum/Faction").default;
        gearSlotFromText: (text: string) => import("./enum/GearSlot").default;
        gearSlotFromItemSlot: (itemSlot: import("./enum/ItemSlot").default) => import("./enum/GearSlot").default;
        raidFromText: (text: string) => import("./enum/Raid").default;
        raidsFromText: (text: string) => import("./enum/Raid").default[];
        worldBossFromText: (text: string) => import("./enum/WorldBoss").default;
        worldBossesFromText: (text: string) => import("./enum/WorldBoss").default[];
        pvpRankFromText: (text: string) => import("./enum/PvPRank").default;
        playableRaceFromText: (text: string) => import("./enum/PlayableRace").default;
        playableClassFromText: (text: string) => import("./enum/PlayableClass").default;
        playableClassesFromText: (text: string) => import("./enum/PlayableClass").default[];
        gearItemBaseName: (itemName: string) => string;
        gearItemBonusTypeFromText: (text: string) => import("./enum/GearItemBonusType").default;
        gearItemSuffixTypeFromText: (text: string) => import("./enum/GearItemSuffixType").default;
        gearItemQualityFromText: (text: string) => import("./enum/GearItemQuality").default;
        buffFromText: (text: string) => import("./enum/Buff").Buff;
        buffsFromText: (text: string) => import("./enum/Buff").Buff[];
        buffMaskFromText: (text: string) => number;
        buffMaskIncludes: (buffMask: number, buff: import("./enum/Buff").Buff) => boolean;
        globalCooldown: number;
        playerLevelCap: number;
        baseSpellCrit: number;
        baseSpellCritMultiplier: number;
        spellHitCap: number;
        spellCritCap: number;
        defaultSettings: (opts?: {
            playerSpec: import("./enum/PlayableSpec").default;
        } | undefined) => import("./interface/Settings").default;
        calcOptsFromSettings: (s: import("./interface/Settings").default) => import("./interface/CalcOpts").default;
        commonNumberResultFromDefault: () => import("./interface/CommonNumberResult").default;
        commonStringResultFromDefault: () => import("./interface/CommonStringResult").default;
        castDmgValuesFromDefault: () => import("./interface/CastDmgValues").default;
        castDmgObjectFromDefault: () => import("./interface/CastDmgObject").default;
        spellChanceToHit: (targetLevel: number, spellHit: number, opts?: import("./interface/CalcOpts").default | undefined) => number;
        spellChanceToMiss: (targetLevel: number, spellHit: number, opts?: import("./interface/CalcOpts").default | undefined) => number;
        spellChanceToCrit: (targetLevel: number, spellHit: number, spellCrit: number, opts?: import("./interface/CalcOpts").default | undefined) => number;
        spellChanceToNormal: (targetLevel: number, spellHit: number, spellCrit: number, opts?: import("./interface/CalcOpts").default | undefined) => number;
        spellPartialResistAvg: (playerLevel: number, playerSpellPenetration: number, targetLevel: number, targetBaseSpellResistance: number, binarySpell: boolean) => number;
        spellCritBonusMultiplier: (opts?: import("./interface/CalcOpts").default | undefined) => number;
        spellCritMultiplier: (opts?: import("./interface/CalcOpts").default | undefined) => number;
        spellDmgMultiplier: (spellName: string, additionalMultipliers: number, opts?: import("./interface/CalcOpts").default | undefined) => import("./interface/CommonNumberResult").default;
        spellDmgBase: (spellName: string, dmg: number, opts?: import("./interface/CalcOpts").default | undefined) => number;
        spellBaseChanceToHit: (targetLevel: number, opts?: import("./interface/CalcOpts").default | undefined) => 83 | 94 | 95 | 96 | 97 | 98 | 99;
        playerManaRegen: (playerLevel: number, playerSpirit: number, playerMp5: number, opts?: import("./interface/CalcOpts").default | undefined) => import("./interface/ManaRegen").default;
        targetSpellResistanceFromLevel: (playerLevel: number, targetLevel: number, binarySpell: boolean) => number;
        targetSpellResistance: (playerLevel: number, playerSpellPenetration: number, targetLevel: number, targetBaseSpellResistance: number, binarySpell: boolean) => number;
    };
    utils: {
        isNode: boolean;
        isBrowser: boolean;
        isWebWorker: boolean;
        isMobile: () => boolean;
        isEmpty: (obj: object) => boolean;
        isLetter: (char: string) => boolean;
        cloneObject: (o: any) => any;
        newZeroedArray: (len: number) => any[];
        bitMaskFromArray: (array: number[]) => number;
        bitMaskIncludes: (bitMask: number, value: number) => boolean;
        triangularNumber: (n: number) => number;
        roundedString: (num: number, decimals: number) => string;
        capitalize: (s: string) => string;
        fuzzyTextFromString: (s: string) => string;
        fuzzyIncludes: (haystack: string, needle: string) => boolean;
        encodeURI: (str: string) => string;
        decodeURI: (str: string) => string;
        paramFromURL: (paramName: string, URL?: string | undefined) => string | null;
        sanitizeStringForEnum: (s: string) => string;
        getAllEnumKeys: (enumType: object) => string[];
        getAllEnumValues: (enumType: object) => number[];
        getEnumKeyByEnumValue: (myEnum: any, enumValue: string | number) => string;
        getEnumValueFromFuzzyText: (myEnum: any, fuzzyText: string, exact?: boolean | undefined) => string | number;
        getEnumValuesFromFuzzyText: (myEnum: any, fuzzyText: string) => any[];
        getEnumBitmaskFromFuzzyText: (myEnum: any, fuzzyText: string) => any;
    };
    gearEnchant: {
        fromDefault: () => import("./interface/GearEnchant").default;
        fromJSON: (enchantJSON?: import("./interface/GearEnchantJSON").default | undefined) => import("./interface/GearEnchant").default;
        fromJSONArray: (gearEnchantJSONArray: import("./interface/GearEnchantJSON").default[]) => import("./interface/GearEnchant").default[];
    };
    gearItem: {
        fromDefault: () => import("./interface/GearItem").default;
        fromJSON: (gearItemJSON?: import("./interface/GearItemJSON").default | undefined) => import("./interface/GearItem").default;
        fromJSONArray: (gearItemJSONArray: import("./interface/GearItemJSON").default[]) => import("./interface/GearItem").default[];
        fromQuery: (opts: import("./interface/GearItemQuery").default) => import("./interface/GearItem").default[];
        isFromRaid: (location: string) => boolean;
        pvpRankFromText: (text: string) => import("./enum/PvPRank").default;
        bonusFromText: (bonus: string) => import("./interface/GearItemBonus").default;
        slotFromItemSlot: (itemSlot: import("./enum/ItemSlot").default) => import("./enum/GearSlot").default;
        qualityFromText: (text: string) => import("./enum/GearItemQuality").default;
    };
    gearItemSuffix: {
        fromText: (id: string, type: string, bonus: string, bonus2?: string | undefined, bonus3?: string | undefined) => import("./interface/GearItemSuffix").default;
        fromItemNameAndBonusValue: (itemName: string, bonusValue: number) => import("./interface/GearItemSuffix").default | undefined;
        fromItemName: (itemName: string) => import("./interface/GearItemSuffix").default[];
    };
    gearSettings: {
        itemId: (gearSettingsObj: import("./interface/GearSettings").default, gearSlot: import("./enum/GearSlot").default) => number;
        setItemId: (gearSettingsObj: import("./interface/GearSettings").default, itemId: number, gearSlot?: import("./enum/GearSlot").default | undefined) => number;
        suffixId: (gearSettingsObj: import("./interface/GearSettings").default, gearSlot: import("./enum/GearSlot").default) => number;
        setSuffixId: (gearSettingsObj: import("./interface/GearSettings").default, itemSuffixId: number, gearSlot?: import("./enum/GearSlot").default | undefined) => number;
        enchantId: (gearSettingsObj: import("./interface/GearSettings").default, gearSlot: import("./enum/GearSlot").default) => number;
        setEnchantId: (gearSettingsObj: import("./interface/GearSettings").default, enchantId: number, gearSlot?: import("./enum/GearSlot").default | undefined) => number;
    };
    spell: {
        fromDefault: () => import("./interface/SpellTrio").default;
    };
    locked: {
        getItemId: (lockedItems: import("./interface/LockedItems").default | undefined, itemSlot: import("./enum/ItemSlot").default) => number;
        getEnchantId: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, itemSlot: import("./enum/ItemSlot").default) => number;
        getItem: (lockedItems: import("./interface/LockedItems").default | undefined, itemSlot: import("./enum/ItemSlot").default) => import("./interface/GearItemJSON").default | undefined;
        getEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, itemSlot: import("./enum/ItemSlot").default) => import("./interface/GearEnchantJSON").default | undefined;
        setItem: (lockedItems: import("./interface/LockedItems").default | undefined, itemSlot: import("./enum/ItemSlot").default, value: number) => number;
        setEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, itemSlot: import("./enum/ItemSlot").default, value: number) => number;
        lockItem: (lockedItems: import("./interface/LockedItems").default | undefined, itemSlot: import("./enum/ItemSlot").default, value: number) => number;
        lockEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, itemSlot: import("./enum/ItemSlot").default, value: number) => number;
        unequipItem: (lockedItems: import("./interface/LockedItems").default | undefined, itemSlot: import("./enum/ItemSlot").default) => number;
        unequipEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, itemSlot: import("./enum/ItemSlot").default) => number;
        unlockItem: (lockedItems: import("./interface/LockedItems").default | undefined, itemSlot: import("./enum/ItemSlot").default) => number;
        unlockEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, itemSlot: import("./enum/ItemSlot").default) => number;
        unequipItems: (lockedItems: import("./interface/LockedItems").default | undefined) => number;
        unequipEnchants: (lockedEnchants: import("./interface/LockedEnchants").default | undefined) => number;
        unlockItems: (lockedItems: import("./interface/LockedItems").default | undefined) => number;
        unlockEnchants: (lockedEnchants: import("./interface/LockedEnchants").default) => number;
        itemLocked: (lockedItems: import("./interface/LockedItems").default | undefined, itemSlot: import("./enum/ItemSlot").default) => boolean;
        enchantLocked: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, itemSlot: import("./enum/ItemSlot").default) => boolean;
        itemEquipped: (lockedItems: import("./interface/LockedItems").default | undefined, itemSlot: import("./enum/ItemSlot").default) => boolean;
        enchantEquipped: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, itemSlot: import("./enum/ItemSlot").default) => boolean;
    };
    optimal: {
        sortByDPS: (a: import("./interface/EquipmentArray").default, b: import("./interface/EquipmentArray").default) => number;
        itemsForSlot: (settings: import("./interface/Settings").default) => import("./interface/GearItemJSON").default[] | undefined;
        enchantsForSlot: (settings: import("./interface/Settings").default) => import("./interface/GearEnchantJSON").default[] | undefined;
        equipment: (settings: import("./interface/Settings").default) => Equipment;
    };
    query: {
        item: (opts: import("./interface/GearItemQuery").default) => import("./interface/GearItemJSON").default | undefined;
        items: (opts: import("./interface/GearItemQuery").default) => import("./interface/GearItemJSON").default[];
        itemSet: (opts: import("./interface/GearItemQuery").default) => import("./interface/GearItemSetJSON").default | undefined;
        itemSets: (opts: import("./interface/GearItemQuery").default) => import("./interface/GearItemSetJSON").default[];
        itemSuffixes: (opts: any) => import("./interface/GearItemSuffix").default[];
        enchant: (opts: import("./interface/GearItemQuery").default) => import("./interface/GearEnchantJSON").default | undefined;
        enchants: (opts: import("./interface/GearItemQuery").default) => import("./interface/GearEnchantJSON").default[];
        spell: (opts: import("./interface/SpellQuery").default) => import("./interface/SpellJSON").default | undefined;
        spells: (opts: import("./interface/SpellQuery").default) => import("./interface/SpellJSON").default[];
    };
    url: {
        stringToParamin: (str: string, opts?: import("./interface/ParaminOptions").default | undefined) => string;
        paraminToString: (paramin: string, opts?: import("./interface/ParaminOptions").default | undefined) => string;
        lockedFromGearParam: (param: string, opts?: import("./interface/ParaminOptions").default | undefined) => Object;
        gearParamFromLocked: (lockedItems: import("./interface/LockedItems").default, lockedEnchants: import("./interface/LockedEnchants").default | null, opts?: import("./interface/ParaminOptions").default | undefined) => string;
        optionFromURL: (name: string) => any;
        publicURL: (equipment: Equipment) => string;
        defaultSettings: () => import("./interface/Settings").default;
    };
    encounter: {
        defaultSettings: (spec?: import("./enum/PlayableSpec").default | undefined) => import("./interface/Settings").default;
        run: (settings: import("./interface/Settings").default) => import("./interface/Encounter").default;
        run2: (settings: import("./interface/Settings").default) => import("./interface/Encounter").default;
    };
    run: (settings: import("./interface/Settings").default) => import("./interface/Encounter").default;
    run2: (settings: import("./interface/Settings").default) => import("./interface/Encounter").default;
    defaultSettings: import("./interface/Settings").default;
    Character: typeof Character;
    Item: typeof Item;
    Equipment: typeof Equipment;
    Target: typeof Target;
    Spell: typeof Spell;
    Cast: typeof Cast;
    Encounter: typeof Encounter;
};
export default _default;
