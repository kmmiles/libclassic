import Character from './class/Character';
import Item from './class/Item';
import Equipment from './class/Equipment';
import Target from './class/Target';
import Spell from './class/Spell';
import Cast from './class/Cast';
import Encounter from './class/Encounter';
import ArmorSubclass from './enum/ArmorSubclass';
import Buffs from './enum/Buffs';
import Faction from './enum/Faction';
import Gender from './enum/Gender';
import ItemClass from './enum/ItemClass';
import ItemQuality from './enum/ItemQuality';
import ItemSlot from './enum/ItemSlot';
import MagicSchool from './enum/MagicSchool';
import PlayableClass from './enum/PlayableClass';
import PlayableRace from './enum/PlayableRace';
import PowerType from './enum/PowerType';
import PvPRank from './enum/PvPRank';
import SortOrder from './enum/SortOrder';
import SpellCritFromIntellectDivisor from './enum/SpellCritFromIntellectDivisor';
import TargetType from './enum/TargetType';
import WeaponSubclass from './enum/WeaponSubclass';
declare const _default: {
    sum: (a: number, b: number) => number;
    common: {
        globalCooldown: number;
        playerLevelCap: number;
        spellHitCap: number;
        spellCritCap: number;
        baseSpellCrit: number;
        baseSpellCritMultiplier: number;
        defaultOptions: import("./interface/ClassicOptions").default;
        factionFromRace: (race: PlayableRace) => Faction;
        buffListToFlags: (buffList: string[]) => Buffs;
        magicSchoolFromText: (magicSchool: string) => MagicSchool;
        magicSchoolToText: (magicSchool: MagicSchool) => string;
        spellChanceToHit: (targetLevel: number, spellHit: number) => number;
        spellChanceToMiss: (targetLevel: number, spellHit: number) => number;
        spellChanceToCrit: (targetLevel: number, spellHit: number, spellCrit: number) => number;
        spellChanceToNormal: (targetLevel: number, spellHit: number, spellCrit: number) => number;
        spellPartialResistAvg: (targetLevel: number, targetBaseSpellResistance: number, characterLevel: number, characterSpellPenetration: number, isBinarySpell?: boolean | undefined) => number;
        spellCritBonusMultiplier: (opts?: {
            vengeanceRank?: number | undefined;
        } | undefined) => number;
        spellCritMultiplier: (opts?: {
            vengeanceRank?: number | undefined;
        } | undefined) => number;
        spellBaseDmgMultiplier: (spellName: string, opts?: {
            moonFuryRank: number;
            improvedMoonFireRank: number;
        } | undefined) => number;
        spellBaseDmg: (spellName: string, dmg: number, opts?: {
            moonFuryRank: number;
            improvedMoonFireRank: number;
        } | undefined) => number;
        targetSpellResistanceFromLevel: (targetLevel: number, characterLevel: number, isBinarySpell?: boolean | undefined) => number;
        targetSpellResistance: (targetLevel: number, targetBaseSpellResistance: number, characterLevel: number, characterSpellPenetration: number, isBinarySpell?: boolean | undefined) => number;
    };
    utils: {
        getEnumKeyByEnumValue: (myEnum: any, enumValue: string | number) => string;
        cumulativeChance: (trials: number, chance: number, x: number) => number;
        consecutiveChance: (trials: number, chance: number, x: number) => number;
        triangularNumber: (n: number) => number;
        roundedString: (num: number, decimals: number) => string;
        isNode: boolean;
        isBrowser: boolean;
        isWebWorker: boolean;
        isMobile: () => boolean;
        cloneObject: (o: any) => any;
        isLetter: (char: string) => boolean;
        capitalize: (s: string) => string;
        encodeURI: (str: string) => string;
        decodeURI: (str: string) => string;
        paramFromURL: (paramName: string, URL?: string | undefined) => string | null;
    };
    query: {
        item: (opts: import("./interface/ItemQuery").default) => import("./interface/ItemJSON").default | undefined;
        items: (opts: import("./interface/ItemQuery").default) => import("./interface/ItemJSON").default[];
        itemSet: (opts: import("./interface/ItemQuery").default) => import("./interface/ItemSetJSON").default | undefined;
        itemSets: (opts: import("./interface/ItemQuery").default) => import("./interface/ItemSetJSON").default[];
        enchant: (opts: import("./interface/ItemQuery").default) => import("./interface/EnchantJSON").default | undefined;
        enchants: (opts: import("./interface/ItemQuery").default) => import("./interface/EnchantJSON").default[];
        spell: (opts: import("./interface/SpellQuery").default) => import("./interface/SpellJSON").default | undefined;
        spells: (opts: import("./interface/SpellQuery").default) => import("./interface/SpellJSON").default[];
    };
    locked: {
        getItemId: (lockedItems: import("./interface/LockedItems").default | undefined, slot: ItemSlot) => string;
        getEnchantId: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: ItemSlot) => string;
        getItem: (lockedItems: import("./interface/LockedItems").default | undefined, slot: ItemSlot) => import("./interface/ItemJSON").default | undefined;
        getEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: ItemSlot) => import("./interface/EnchantJSON").default | undefined;
        setItem: (lockedItems: import("./interface/LockedItems").default | undefined, slot: ItemSlot, value: string) => number;
        setEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: ItemSlot, value: string) => number;
        lockItem: (lockedItems: import("./interface/LockedItems").default | undefined, slot: ItemSlot, value: string) => number;
        lockEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: ItemSlot, value: string) => number;
        unequipItem: (lockedItems: import("./interface/LockedItems").default | undefined, slot: ItemSlot) => number;
        unequipEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: ItemSlot) => number;
        unlockItem: (lockedItems: import("./interface/LockedItems").default | undefined, slot: ItemSlot) => number;
        unlockEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: ItemSlot) => number;
        unequipItems: (lockedItems: import("./interface/LockedItems").default | undefined) => number;
        unequipEnchants: (lockedEnchants: import("./interface/LockedEnchants").default | undefined) => number;
        unlockItems: (lockedItems: import("./interface/LockedItems").default | undefined) => number;
        unlockEnchants: (lockedEnchants: import("./interface/LockedEnchants").default) => number;
        itemLocked: (lockedItems: import("./interface/LockedItems").default | undefined, slot: ItemSlot) => boolean;
        enchantLocked: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: ItemSlot) => boolean;
        itemEquipped: (lockedItems: import("./interface/LockedItems").default | undefined, slot: ItemSlot) => boolean;
        enchantEquipped: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: ItemSlot) => boolean;
    };
    optimal: {
        sortByDPS: (a: import("./interface/EquipmentArray").default, b: import("./interface/EquipmentArray").default) => number;
        itemsForSlot: (options: import("./interface/ClassicOptions").default) => import("./interface/ItemJSON").default[] | undefined;
        enchantsForSlot: (options: import("./interface/ClassicOptions").default) => import("./interface/EnchantJSON").default[] | undefined;
        equipment: (options: import("./interface/ClassicOptions").default) => Equipment;
    };
    url: {
        stringToParamin: (str: string, opts?: import("./interface/ParaminOptions").default | undefined) => string;
        paraminToString: (paramin: string, opts?: import("./interface/ParaminOptions").default | undefined) => string;
        lockedFromGearParam: (param: string, opts?: import("./interface/ParaminOptions").default | undefined) => Object;
        gearParamFromLocked: (lockedItems: import("./interface/LockedItems").default, lockedEnchants: import("./interface/LockedEnchants").default | null, opts?: import("./interface/ParaminOptions").default | undefined) => string;
        optionFromURL: (name: string) => any;
        publicURL: (equipment: Equipment) => string;
        defaultClassicOptions: () => import("./interface/ClassicOptions").default;
    };
    Character: typeof Character;
    Item: typeof Item;
    Equipment: typeof Equipment;
    Target: typeof Target;
    Spell: typeof Spell;
    Cast: typeof Cast;
    Encounter: typeof Encounter;
    ArmorSubclass: typeof ArmorSubclass;
    Buffs: typeof Buffs;
    Faction: typeof Faction;
    Gender: typeof Gender;
    ItemClass: typeof ItemClass;
    ItemQuality: typeof ItemQuality;
    ItemSlot: typeof ItemSlot;
    MagicSchool: typeof MagicSchool;
    PlayableClass: typeof PlayableClass;
    PlayableRace: typeof PlayableRace;
    PowerType: typeof PowerType;
    PvPRank: typeof PvPRank;
    SortOrder: typeof SortOrder;
    SpellCritFromIntellectDivisor: typeof SpellCritFromIntellectDivisor;
    TargetType: typeof TargetType;
    WeaponSubclass: typeof WeaponSubclass;
};
export default _default;
