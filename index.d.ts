import Character from './class/Character';
import Item from './class/Item';
import Equipment from './class/Equipment';
import Target from './class/Target';
import Spell from './class/Spell';
import Cast from './class/Cast';
import Encounter from './class/Encounter';
import Settings from './interface/Settings';
import EncounterResults from './interface/EncounterResults';
declare const _default: {
    sum: (a: number, b: number) => number;
    common: {
        utils: {
            getEnumKeyByEnumValue: (myEnum: any, enumValue: string | number) => string;
            getEnumValueFromFuzzyText: (myEnum: any, fuzzyText: string, exact?: boolean | undefined) => string | number;
            getEnumValuesFromFuzzyText: (myEnum: any, fuzzyText: string) => any[];
            sanitizeStringForEnum: (s: string) => string;
            triangularNumber: (n: number) => number;
            roundedString: (num: number, decimals: number) => string;
            isNode: boolean;
            isBrowser: boolean;
            isWebWorker: boolean;
            isMobile: () => boolean;
            cloneObject: (o: any) => any;
            isLetter: (char: string) => boolean;
            capitalize: (s: string) => string;
            fuzzyTextFromString: (s: string) => string;
            encodeURI: (str: string) => string;
            decodeURI: (str: string) => string;
            paramFromURL: (paramName: string, URL?: string | undefined) => string | null;
        };
        enums: {
            ArmorSubclass: typeof import("./enum/ArmorSubclass").default;
            Buffs: typeof import("./enum/Buffs").Buffs;
            Faction: typeof import("./enum/Faction").default;
            Gender: typeof import("./enum/Gender").default;
            ItemClass: typeof import("./enum/ItemClass").default;
            ItemQuality: typeof import("./enum/ItemQuality").default;
            ItemSlot: typeof import("./enum/ItemSlot").default;
            MagicSchool: typeof import("./enum/MagicSchool").default;
            PlayableClass: typeof import("./enum/PlayableClass").default;
            PlayableRace: typeof import("./enum/PlayableRace").default;
            PowerType: typeof import("./enum/PowerType").default;
            PvPRank: typeof import("./enum/PvPRank").default;
            SortOrder: typeof import("./enum/SortOrder").default;
            SpellCritFromIntellectDivisor: typeof import("./enum/SpellCritFromIntellectDivisor").default;
            TargetType: typeof import("./enum/TargetType").default;
            WeaponSubclass: typeof import("./enum/WeaponSubclass").default;
            ItemSuffixType: typeof import("./enum/ItemSuffixType").default;
            Raid: typeof import("./enum/Raid").default;
            WorldBoss: typeof import("./enum/WorldBoss").default;
            factionFromRace: (race: import("./enum/PlayableRace").default) => import("./enum/Faction").default;
            buffListToFlags: (buffList: string[]) => import("./enum/Buffs").Buffs;
            gearSlotFromText: (text: string) => import("./enum/GearSlot").default;
            raidFromText: (text: string) => import("./enum/Raid").default;
            raidsFromText: (text: string) => import("./enum/Raid").default[];
            worldBossFromText: (text: string) => import("./enum/WorldBoss").default;
            worldBossesFromText: (text: string) => import("./enum/WorldBoss").default[];
            pvpRankFromText: (text: string) => import("./enum/PvPRank").default;
            playableRaceFromText: (text: string) => import("./enum/PlayableRace").default;
            playableClassFromText: (text: string) => import("./enum/PlayableClass").default;
            playableClassesFromText: (text: string) => import("./enum/PlayableClass").default[];
            itemBonusTypeFromText: (text: string) => import("./enum/ItemBonusType").default;
            itemSuffixTypeFromText: (text: string) => import("./enum/ItemSuffixType").default;
            itemQualityFromText: (text: string) => import("./enum/ItemQuality").default;
        };
        calc: {
            globalCooldown: number;
            playerLevelCap: number;
            baseSpellCrit: number;
            baseSpellCritMultiplier: number;
            spellHitCap: number;
            spellCritCap: number;
            calcOptsFromSettings: (s: Settings) => import("./interface/CalcOpts").default;
            spellChanceToHit: (targetLevel: number, spellHit: number, opts?: import("./interface/CalcOpts").default | undefined) => number;
            spellChanceToMiss: (targetLevel: number, spellHit: number, opts?: import("./interface/CalcOpts").default | undefined) => number;
            spellChanceToCrit: (targetLevel: number, spellHit: number, spellCrit: number, opts?: import("./interface/CalcOpts").default | undefined) => number;
            spellChanceToNormal: (targetLevel: number, spellHit: number, spellCrit: number, opts?: import("./interface/CalcOpts").default | undefined) => number;
            spellPartialResistAvg: (targetLevel: number, targetBaseSpellResistance: number, characterLevel: number, characterSpellPenetration: number, binarySpell: boolean, opts?: import("./interface/CalcOpts").default | undefined) => number;
            spellCritBonusMultiplier: (opts?: import("./interface/CalcOpts").default | undefined) => number;
            spellCritMultiplier: (opts?: import("./interface/CalcOpts").default | undefined) => number;
            spellBaseDmgMultiplier: (spellName: string, opts?: import("./interface/CalcOpts").default | undefined) => number;
            spellBaseDmg: (spellName: string, dmg: number, opts?: import("./interface/CalcOpts").default | undefined) => number;
            targetSpellResistanceFromLevel: (targetLevel: number, characterLevel: number, binarySpell: boolean, opts?: import("./interface/CalcOpts").default | undefined) => number;
            targetSpellResistance: (targetLevel: number, targetBaseSpellResistance: number, characterLevel: number, characterSpellPenetration: number, binarySpell: boolean, opts?: import("./interface/CalcOpts").default | undefined) => number;
            manaPerTick: (charLvl: number, charSpirit: number, charMp5: number, opts?: import("./interface/CalcOpts").default | undefined) => any;
        };
        settings: {
            defaults: (opts?: {
                playerSpec: import("./enum/PlayableSpec").default;
            } | undefined) => Settings;
        };
    };
    calc: {
        globalCooldown: number;
        playerLevelCap: number;
        baseSpellCrit: number;
        baseSpellCritMultiplier: number;
        spellHitCap: number;
        spellCritCap: number;
        calcOptsFromSettings: (s: Settings) => import("./interface/CalcOpts").default;
        spellChanceToHit: (targetLevel: number, spellHit: number, opts?: import("./interface/CalcOpts").default | undefined) => number;
        spellChanceToMiss: (targetLevel: number, spellHit: number, opts?: import("./interface/CalcOpts").default | undefined) => number;
        spellChanceToCrit: (targetLevel: number, spellHit: number, spellCrit: number, opts?: import("./interface/CalcOpts").default | undefined) => number;
        spellChanceToNormal: (targetLevel: number, spellHit: number, spellCrit: number, opts?: import("./interface/CalcOpts").default | undefined) => number;
        spellPartialResistAvg: (targetLevel: number, targetBaseSpellResistance: number, characterLevel: number, characterSpellPenetration: number, binarySpell: boolean, opts?: import("./interface/CalcOpts").default | undefined) => number;
        spellCritBonusMultiplier: (opts?: import("./interface/CalcOpts").default | undefined) => number;
        spellCritMultiplier: (opts?: import("./interface/CalcOpts").default | undefined) => number;
        spellBaseDmgMultiplier: (spellName: string, opts?: import("./interface/CalcOpts").default | undefined) => number;
        spellBaseDmg: (spellName: string, dmg: number, opts?: import("./interface/CalcOpts").default | undefined) => number;
        targetSpellResistanceFromLevel: (targetLevel: number, characterLevel: number, binarySpell: boolean, opts?: import("./interface/CalcOpts").default | undefined) => number;
        targetSpellResistance: (targetLevel: number, targetBaseSpellResistance: number, characterLevel: number, characterSpellPenetration: number, binarySpell: boolean, opts?: import("./interface/CalcOpts").default | undefined) => number;
        manaPerTick: (charLvl: number, charSpirit: number, charMp5: number, opts?: import("./interface/CalcOpts").default | undefined) => any;
    };
    enums: {
        ArmorSubclass: typeof import("./enum/ArmorSubclass").default;
        Buffs: typeof import("./enum/Buffs").Buffs;
        Faction: typeof import("./enum/Faction").default;
        Gender: typeof import("./enum/Gender").default;
        ItemClass: typeof import("./enum/ItemClass").default;
        ItemQuality: typeof import("./enum/ItemQuality").default;
        ItemSlot: typeof import("./enum/ItemSlot").default;
        MagicSchool: typeof import("./enum/MagicSchool").default;
        PlayableClass: typeof import("./enum/PlayableClass").default;
        PlayableRace: typeof import("./enum/PlayableRace").default;
        PowerType: typeof import("./enum/PowerType").default;
        PvPRank: typeof import("./enum/PvPRank").default;
        SortOrder: typeof import("./enum/SortOrder").default;
        SpellCritFromIntellectDivisor: typeof import("./enum/SpellCritFromIntellectDivisor").default;
        TargetType: typeof import("./enum/TargetType").default;
        WeaponSubclass: typeof import("./enum/WeaponSubclass").default;
        ItemSuffixType: typeof import("./enum/ItemSuffixType").default;
        Raid: typeof import("./enum/Raid").default;
        WorldBoss: typeof import("./enum/WorldBoss").default;
        factionFromRace: (race: import("./enum/PlayableRace").default) => import("./enum/Faction").default;
        buffListToFlags: (buffList: string[]) => import("./enum/Buffs").Buffs;
        gearSlotFromText: (text: string) => import("./enum/GearSlot").default;
        raidFromText: (text: string) => import("./enum/Raid").default;
        raidsFromText: (text: string) => import("./enum/Raid").default[];
        worldBossFromText: (text: string) => import("./enum/WorldBoss").default;
        worldBossesFromText: (text: string) => import("./enum/WorldBoss").default[];
        pvpRankFromText: (text: string) => import("./enum/PvPRank").default;
        playableRaceFromText: (text: string) => import("./enum/PlayableRace").default;
        playableClassFromText: (text: string) => import("./enum/PlayableClass").default;
        playableClassesFromText: (text: string) => import("./enum/PlayableClass").default[];
        itemBonusTypeFromText: (text: string) => import("./enum/ItemBonusType").default;
        itemSuffixTypeFromText: (text: string) => import("./enum/ItemSuffixType").default;
        itemQualityFromText: (text: string) => import("./enum/ItemQuality").default;
    };
    settings: {
        defaults: (opts?: {
            playerSpec: import("./enum/PlayableSpec").default;
        } | undefined) => Settings;
    };
    utils: {
        getEnumKeyByEnumValue: (myEnum: any, enumValue: string | number) => string;
        getEnumValueFromFuzzyText: (myEnum: any, fuzzyText: string, exact?: boolean | undefined) => string | number;
        getEnumValuesFromFuzzyText: (myEnum: any, fuzzyText: string) => any[];
        sanitizeStringForEnum: (s: string) => string;
        triangularNumber: (n: number) => number;
        roundedString: (num: number, decimals: number) => string;
        isNode: boolean;
        isBrowser: boolean;
        isWebWorker: boolean;
        isMobile: () => boolean;
        cloneObject: (o: any) => any;
        isLetter: (char: string) => boolean;
        capitalize: (s: string) => string;
        fuzzyTextFromString: (s: string) => string;
        encodeURI: (str: string) => string;
        decodeURI: (str: string) => string;
        paramFromURL: (paramName: string, URL?: string | undefined) => string | null;
    };
    mt: {
        query: {
            item: (opts: import("./interface/ItemQuery").default) => import("./interface/ItemJSON").default | undefined;
            items: (opts: import("./interface/ItemQuery").default) => import("./interface/ItemJSON").default[];
            itemSet: (opts: import("./interface/ItemQuery").default) => import("./interface/ItemSetJSON").default | undefined;
            itemSets: (opts: import("./interface/ItemQuery").default) => import("./interface/ItemSetJSON").default[];
            itemSuffixes: (opts: any) => import("./interface/ItemSuffixJSON").default[];
            enchant: (opts: import("./interface/ItemQuery").default) => import("./interface/EnchantJSON").default | undefined;
            enchants: (opts: import("./interface/ItemQuery").default) => import("./interface/EnchantJSON").default[];
            spell: (opts: import("./interface/SpellQuery").default) => import("./interface/SpellJSON").default | undefined;
            spells: (opts: import("./interface/SpellQuery").default) => import("./interface/SpellJSON").default[];
        };
        locked: {
            getItemId: (lockedItems: import("./interface/LockedItems").default | undefined, slot: import("./enum/ItemSlot").default) => string;
            getEnchantId: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: import("./enum/ItemSlot").default) => string;
            getItem: (lockedItems: import("./interface/LockedItems").default | undefined, slot: import("./enum/ItemSlot").default) => import("./interface/ItemJSON").default | undefined;
            getEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: import("./enum/ItemSlot").default) => import("./interface/EnchantJSON").default | undefined;
            setItem: (lockedItems: import("./interface/LockedItems").default | undefined, slot: import("./enum/ItemSlot").default, value: string) => number;
            setEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: import("./enum/ItemSlot").default, value: string) => number;
            lockItem: (lockedItems: import("./interface/LockedItems").default | undefined, slot: import("./enum/ItemSlot").default, value: string) => number;
            lockEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: import("./enum/ItemSlot").default, value: string) => number;
            unequipItem: (lockedItems: import("./interface/LockedItems").default | undefined, slot: import("./enum/ItemSlot").default) => number;
            unequipEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: import("./enum/ItemSlot").default) => number;
            unlockItem: (lockedItems: import("./interface/LockedItems").default | undefined, slot: import("./enum/ItemSlot").default) => number;
            unlockEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: import("./enum/ItemSlot").default) => number;
            unequipItems: (lockedItems: import("./interface/LockedItems").default | undefined) => number;
            unequipEnchants: (lockedEnchants: import("./interface/LockedEnchants").default | undefined) => number;
            unlockItems: (lockedItems: import("./interface/LockedItems").default | undefined) => number;
            unlockEnchants: (lockedEnchants: import("./interface/LockedEnchants").default) => number;
            itemLocked: (lockedItems: import("./interface/LockedItems").default | undefined, slot: import("./enum/ItemSlot").default) => boolean;
            enchantLocked: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: import("./enum/ItemSlot").default) => boolean;
            itemEquipped: (lockedItems: import("./interface/LockedItems").default | undefined, slot: import("./enum/ItemSlot").default) => boolean;
            enchantEquipped: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: import("./enum/ItemSlot").default) => boolean;
        };
        optimal: {
            sortByDPS: (a: import("./interface/EquipmentArray").default, b: import("./interface/EquipmentArray").default) => number;
            itemsForSlot: (settings: Settings) => import("./interface/ItemJSON").default[] | undefined;
            enchantsForSlot: (settings: Settings) => import("./interface/EnchantJSON").default[] | undefined;
            equipment: (settings: Settings) => Equipment;
        };
        gear: {
            itemBonusFromText: (bonus: string) => import("./interface/ItemBonus").default;
            itemSuffixTypeFromItemName: (itemName: string) => import("./enum/ItemSuffixType").default;
            itemSuffixFromText: (id: string, type: string, bonus: string, bonus2?: string | undefined, bonus3?: string | undefined) => import("./interface/ItemSuffixJSON").default;
            itemSuffixFromItemNameAndBonusValue: (itemName: string, bonusValue: number) => import("./interface/ItemSuffixJSON").default | undefined;
            itemSuffixesFromItemName: (itemName: string) => import("./interface/ItemSuffixJSON").default[];
        };
        url: {
            stringToParamin: (str: string, opts?: import("./interface/ParaminOptions").default | undefined) => string;
            paraminToString: (paramin: string, opts?: import("./interface/ParaminOptions").default | undefined) => string;
            lockedFromGearParam: (param: string, opts?: import("./interface/ParaminOptions").default | undefined) => Object;
            gearParamFromLocked: (lockedItems: import("./interface/LockedItems").default, lockedEnchants: import("./interface/LockedEnchants").default | null, opts?: import("./interface/ParaminOptions").default | undefined) => string;
            optionFromURL: (name: string) => any;
            publicURL: (equipment: Equipment) => string;
            defaultSettings: () => Settings;
        };
    };
    gear: {
        itemBonusFromText: (bonus: string) => import("./interface/ItemBonus").default;
        itemSuffixTypeFromItemName: (itemName: string) => import("./enum/ItemSuffixType").default;
        itemSuffixFromText: (id: string, type: string, bonus: string, bonus2?: string | undefined, bonus3?: string | undefined) => import("./interface/ItemSuffixJSON").default;
        itemSuffixFromItemNameAndBonusValue: (itemName: string, bonusValue: number) => import("./interface/ItemSuffixJSON").default | undefined;
        itemSuffixesFromItemName: (itemName: string) => import("./interface/ItemSuffixJSON").default[];
    };
    locked: {
        getItemId: (lockedItems: import("./interface/LockedItems").default | undefined, slot: import("./enum/ItemSlot").default) => string;
        getEnchantId: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: import("./enum/ItemSlot").default) => string;
        getItem: (lockedItems: import("./interface/LockedItems").default | undefined, slot: import("./enum/ItemSlot").default) => import("./interface/ItemJSON").default | undefined;
        getEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: import("./enum/ItemSlot").default) => import("./interface/EnchantJSON").default | undefined;
        setItem: (lockedItems: import("./interface/LockedItems").default | undefined, slot: import("./enum/ItemSlot").default, value: string) => number;
        setEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: import("./enum/ItemSlot").default, value: string) => number;
        lockItem: (lockedItems: import("./interface/LockedItems").default | undefined, slot: import("./enum/ItemSlot").default, value: string) => number;
        lockEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: import("./enum/ItemSlot").default, value: string) => number;
        unequipItem: (lockedItems: import("./interface/LockedItems").default | undefined, slot: import("./enum/ItemSlot").default) => number;
        unequipEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: import("./enum/ItemSlot").default) => number;
        unlockItem: (lockedItems: import("./interface/LockedItems").default | undefined, slot: import("./enum/ItemSlot").default) => number;
        unlockEnchant: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: import("./enum/ItemSlot").default) => number;
        unequipItems: (lockedItems: import("./interface/LockedItems").default | undefined) => number;
        unequipEnchants: (lockedEnchants: import("./interface/LockedEnchants").default | undefined) => number;
        unlockItems: (lockedItems: import("./interface/LockedItems").default | undefined) => number;
        unlockEnchants: (lockedEnchants: import("./interface/LockedEnchants").default) => number;
        itemLocked: (lockedItems: import("./interface/LockedItems").default | undefined, slot: import("./enum/ItemSlot").default) => boolean;
        enchantLocked: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: import("./enum/ItemSlot").default) => boolean;
        itemEquipped: (lockedItems: import("./interface/LockedItems").default | undefined, slot: import("./enum/ItemSlot").default) => boolean;
        enchantEquipped: (lockedEnchants: import("./interface/LockedEnchants").default | undefined, slot: import("./enum/ItemSlot").default) => boolean;
    };
    optimal: {
        sortByDPS: (a: import("./interface/EquipmentArray").default, b: import("./interface/EquipmentArray").default) => number;
        itemsForSlot: (settings: Settings) => import("./interface/ItemJSON").default[] | undefined;
        enchantsForSlot: (settings: Settings) => import("./interface/EnchantJSON").default[] | undefined;
        equipment: (settings: Settings) => Equipment;
    };
    query: {
        item: (opts: import("./interface/ItemQuery").default) => import("./interface/ItemJSON").default | undefined;
        items: (opts: import("./interface/ItemQuery").default) => import("./interface/ItemJSON").default[];
        itemSet: (opts: import("./interface/ItemQuery").default) => import("./interface/ItemSetJSON").default | undefined;
        itemSets: (opts: import("./interface/ItemQuery").default) => import("./interface/ItemSetJSON").default[];
        itemSuffixes: (opts: any) => import("./interface/ItemSuffixJSON").default[];
        enchant: (opts: import("./interface/ItemQuery").default) => import("./interface/EnchantJSON").default | undefined;
        enchants: (opts: import("./interface/ItemQuery").default) => import("./interface/EnchantJSON").default[];
        spell: (opts: import("./interface/SpellQuery").default) => import("./interface/SpellJSON").default | undefined;
        spells: (opts: import("./interface/SpellQuery").default) => import("./interface/SpellJSON").default[];
    };
    url: {
        stringToParamin: (str: string, opts?: import("./interface/ParaminOptions").default | undefined) => string;
        paraminToString: (paramin: string, opts?: import("./interface/ParaminOptions").default | undefined) => string;
        lockedFromGearParam: (param: string, opts?: import("./interface/ParaminOptions").default | undefined) => Object;
        gearParamFromLocked: (lockedItems: import("./interface/LockedItems").default, lockedEnchants: import("./interface/LockedEnchants").default | null, opts?: import("./interface/ParaminOptions").default | undefined) => string;
        optionFromURL: (name: string) => any;
        publicURL: (equipment: Equipment) => string;
        defaultSettings: () => Settings;
    };
    run: (settings?: Settings | undefined) => EncounterResults;
    getDefaultSettings: () => Settings;
    Character: typeof Character;
    Item: typeof Item;
    Equipment: typeof Equipment;
    Target: typeof Target;
    Spell: typeof Spell;
    Cast: typeof Cast;
    Encounter: typeof Encounter;
};
export default _default;
